--- a/src/main/java/net/milkbowl/vault/economy/Economy.java
+++ b/src/main/java/net/milkbowl/vault/economy/Economy.java
@@ -30,19 +_,19 @@
      * Checks if economy method is enabled.
      * @return Success or Failure
      */
-    public boolean isEnabled();
+    boolean isEnabled();
 
     /**
      * Gets name of economy method
      * @return Name of Economy Method
      */
-    public String getName();
+    String getName();
 
     /**
      * Returns true if the given implementation supports banks.
      * @return true if the implementation supports banks
      */
-    public boolean hasBankSupport();
+    boolean hasBankSupport();
 
     /**
      * Some economy plugins round off after a certain number of digits.
@@ -50,7 +_,7 @@
      * or -1 if no rounding occurs.
      * @return number of digits after the decimal point kept
      */
-    public int fractionalDigits();
+    int fractionalDigits();
 
     /**
      * Format amount into a human readable String This provides translation into
@@ -59,7 +_,7 @@
      * @param amount to format
      * @return Human readable string describing amount
      */
-    public String format(double amount);
+    String format(double amount);
 
     /**
      * Returns the name of the currency in plural form.
@@ -67,7 +_,7 @@
      * 
      * @return name of the currency (plural)
      */
-    public String currencyNamePlural();
+    String currencyNamePlural();
 
 
     /**
@@ -76,14 +_,14 @@
      * 
      * @return name of the currency (singular)
      */
-    public String currencyNameSingular();
+    String currencyNameSingular();
 
     /**
      * 
      * @deprecated As of VaultAPI 1.4 use {@link #hasAccount(OfflinePlayer)} instead.
      */
     @Deprecated
-    public boolean hasAccount(String playerName);
+    boolean hasAccount(String playerName);
 
     /**
      * Checks if this player has an account on the server yet
@@ -93,13 +_,13 @@
      * @param player to check
      * @return if the player has an account
      */
-    public boolean hasAccount(OfflinePlayer player);
+    boolean hasAccount(OfflinePlayer player);
     
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #hasAccount(OfflinePlayer, String)} instead.
      */
     @Deprecated
-    public boolean hasAccount(String playerName, String worldName);
+    boolean hasAccount(String playerName, String worldName);
 
     /**
      * Checks if this player has an account on the server yet on the given world
@@ -110,13 +_,13 @@
      * @param worldName world-specific account
      * @return if the player has an account
      */
-    public boolean hasAccount(OfflinePlayer player, String worldName);
+    boolean hasAccount(OfflinePlayer player, String worldName);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #getBalance(OfflinePlayer)} instead.
      */
     @Deprecated
-    public double getBalance(String playerName);
+    double getBalance(String playerName);
     
     /**
      * Gets balance of a player
@@ -124,13 +_,13 @@
      * @param player of the player
      * @return Amount currently held in players account
      */
-    public double getBalance(OfflinePlayer player);
+    double getBalance(OfflinePlayer player);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #getBalance(OfflinePlayer, String)} instead.
      */
     @Deprecated
-    public double getBalance(String playerName, String world);
+    double getBalance(String playerName, String world);
     
     /**
      * Gets balance of a player on the specified world.
@@ -139,13 +_,13 @@
      * @param world name of the world
      * @return Amount currently held in players account
      */
-    public double getBalance(OfflinePlayer player, String world);
+    double getBalance(OfflinePlayer player, String world);
     
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #has(OfflinePlayer, double)} instead.
      */
     @Deprecated
-    public boolean has(String playerName, double amount);
+    boolean has(String playerName, double amount);
     
     /**
      * Checks if the player account has the amount - DO NOT USE NEGATIVE AMOUNTS
@@ -154,13 +_,13 @@
      * @param amount to check for
      * @return True if <b>player</b> has <b>amount</b>, False else wise
      */
-    public boolean has(OfflinePlayer player, double amount);
+    boolean has(OfflinePlayer player, double amount);
 
     /**
      * @deprecated As of VaultAPI 1.4 use @{link {@link #has(OfflinePlayer, String, double)} instead.
      */
     @Deprecated
-    public boolean has(String playerName, String worldName, double amount);
+    boolean has(String playerName, String worldName, double amount);
     
     /**
      * Checks if the player account has the amount in a given world - DO NOT USE NEGATIVE AMOUNTS
@@ -171,13 +_,13 @@
      * @param amount to check for
      * @return True if <b>player</b> has <b>amount</b>, False else wise
      */
-    public boolean has(OfflinePlayer player, String worldName, double amount);
+    boolean has(OfflinePlayer player, String worldName, double amount);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #withdrawPlayer(OfflinePlayer, double)} instead.
      */
     @Deprecated
-    public EconomyResponse withdrawPlayer(String playerName, double amount);
+    EconomyResponse withdrawPlayer(String playerName, double amount);
 
     /**
      * Withdraw an amount from a player - DO NOT USE NEGATIVE AMOUNTS
@@ -186,13 +_,13 @@
      * @param amount Amount to withdraw
      * @return Detailed response of transaction
      */
-    public EconomyResponse withdrawPlayer(OfflinePlayer player, double amount);
+    EconomyResponse withdrawPlayer(OfflinePlayer player, double amount);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #withdrawPlayer(OfflinePlayer, String, double)} instead.
      */
     @Deprecated
-    public EconomyResponse withdrawPlayer(String playerName, String worldName, double amount);
+    EconomyResponse withdrawPlayer(String playerName, String worldName, double amount);
     
     /**
      * Withdraw an amount from a player on a given world - DO NOT USE NEGATIVE AMOUNTS
@@ -202,13 +_,13 @@
      * @param amount Amount to withdraw
      * @return Detailed response of transaction
      */
-    public EconomyResponse withdrawPlayer(OfflinePlayer player, String worldName, double amount);
+    EconomyResponse withdrawPlayer(OfflinePlayer player, String worldName, double amount);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #depositPlayer(OfflinePlayer, double)} instead.
      */
     @Deprecated
-    public EconomyResponse depositPlayer(String playerName, double amount);
+    EconomyResponse depositPlayer(String playerName, double amount);
 
     /**
      * Deposit an amount to a player - DO NOT USE NEGATIVE AMOUNTS
@@ -217,13 +_,13 @@
      * @param amount Amount to deposit
      * @return Detailed response of transaction
      */
-    public EconomyResponse depositPlayer(OfflinePlayer player, double amount);
+    EconomyResponse depositPlayer(OfflinePlayer player, double amount);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {@link #depositPlayer(OfflinePlayer, String, double)} instead.
      */
     @Deprecated
-    public EconomyResponse depositPlayer(String playerName, String worldName, double amount);
+    EconomyResponse depositPlayer(String playerName, String worldName, double amount);
    
     /**
      * Deposit an amount to a player - DO NOT USE NEGATIVE AMOUNTS
@@ -234,13 +_,13 @@
      * @param amount Amount to deposit
      * @return Detailed response of transaction
      */
-    public EconomyResponse depositPlayer(OfflinePlayer player, String worldName, double amount);
+    EconomyResponse depositPlayer(OfflinePlayer player, String worldName, double amount);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {{@link #createBank(String, OfflinePlayer)} instead.
      */
     @Deprecated
-    public EconomyResponse createBank(String name, String player);
+    EconomyResponse createBank(String name, String player);
 
     /**
      * Creates a bank account with the specified name and the player as the owner
@@ -248,21 +_,21 @@
      * @param player the account should be linked to
      * @return EconomyResponse Object
      */
-    public EconomyResponse createBank(String name, OfflinePlayer player);
+    EconomyResponse createBank(String name, OfflinePlayer player);
 
     /**
      * Deletes a bank account with the specified name.
      * @param name of the back to delete
      * @return if the operation completed successfully
      */
-    public EconomyResponse deleteBank(String name);
+    EconomyResponse deleteBank(String name);
 
     /**
      * Returns the amount the bank has
      * @param name of the account
      * @return EconomyResponse Object
      */
-    public EconomyResponse bankBalance(String name);
+    EconomyResponse bankBalance(String name);
 
     /**
      * Returns true or false whether the bank has the amount specified - DO NOT USE NEGATIVE AMOUNTS
@@ -271,7 +_,7 @@
      * @param amount to check for
      * @return EconomyResponse Object
      */
-    public EconomyResponse bankHas(String name, double amount);
+    EconomyResponse bankHas(String name, double amount);
 
     /**
      * Withdraw an amount from a bank account - DO NOT USE NEGATIVE AMOUNTS
@@ -280,7 +_,7 @@
      * @param amount to withdraw
      * @return EconomyResponse Object
      */
-    public EconomyResponse bankWithdraw(String name, double amount);
+    EconomyResponse bankWithdraw(String name, double amount);
 
     /**
      * Deposit an amount into a bank account - DO NOT USE NEGATIVE AMOUNTS
@@ -289,13 +_,13 @@
      * @param amount to deposit
      * @return EconomyResponse Object
      */
-    public EconomyResponse bankDeposit(String name, double amount);
+    EconomyResponse bankDeposit(String name, double amount);
     
     /**
      * @deprecated As of VaultAPI 1.4 use {{@link #isBankOwner(String, OfflinePlayer)} instead.
      */
     @Deprecated
-    public EconomyResponse isBankOwner(String name, String playerName);
+    EconomyResponse isBankOwner(String name, String playerName);
     
     /**
      * Check if a player is the owner of a bank account
@@ -304,13 +_,13 @@
      * @param player to check for ownership
      * @return EconomyResponse Object
      */
-    public EconomyResponse isBankOwner(String name, OfflinePlayer player);
+    EconomyResponse isBankOwner(String name, OfflinePlayer player);
 
     /**
      * @deprecated As of VaultAPI 1.4 use {{@link #isBankMember(String, OfflinePlayer)} instead.
      */
     @Deprecated
-    public EconomyResponse isBankMember(String name, String playerName);
+    EconomyResponse isBankMember(String name, String playerName);
     
     /**
      * Check if the player is a member of the bank account
@@ -319,32 +_,32 @@
      * @param player to check membership
      * @return EconomyResponse Object
      */
-    public EconomyResponse isBankMember(String name, OfflinePlayer player);
+    EconomyResponse isBankMember(String name, OfflinePlayer player);
 
     /**
      * Gets the list of banks
      * @return the List of Banks
      */
-    public List<String> getBanks();
+    List<String> getBanks();
 
     /**
      * @deprecated As of VaultAPI 1.4 use {{@link #createPlayerAccount(OfflinePlayer)} instead.
      */
     @Deprecated
-    public boolean createPlayerAccount(String playerName);
+    boolean createPlayerAccount(String playerName);
     
     /**
      * Attempts to create a player account for the given player
      * @param player OfflinePlayer
      * @return if the account creation was successful
      */
-    public boolean createPlayerAccount(OfflinePlayer player);
+    boolean createPlayerAccount(OfflinePlayer player);
     
     /**
      * @deprecated As of VaultAPI 1.4 use {{@link #createPlayerAccount(OfflinePlayer, String)} instead.
      */
     @Deprecated
-    public boolean createPlayerAccount(String playerName, String worldName);
+    boolean createPlayerAccount(String playerName, String worldName);
     
     /**
      * Attempts to create a player account for the given player on the specified world
@@ -353,5 +_,5 @@
      * @param worldName String name of the world
      * @return if the account creation was successful
      */
-    public boolean createPlayerAccount(OfflinePlayer player, String worldName);
+    boolean createPlayerAccount(OfflinePlayer player, String worldName);
 }
