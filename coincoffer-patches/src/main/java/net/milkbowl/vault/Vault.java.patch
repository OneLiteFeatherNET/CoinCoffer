--- /dev/null
+++ b/src/main/java/net/milkbowl/vault/Vault.java
@@ -1,0 +_,83 @@
+package net.milkbowl.vault;
+
+import net.milkbowl.vault.chat.Chat;
+import net.milkbowl.vault.commands.ConvertCommand;
+import net.milkbowl.vault.commands.InfoCommand;
+import net.milkbowl.vault.economy.Economy;
+import net.milkbowl.vault.permission.Permission;
+import org.bstats.bukkit.Metrics;
+import org.bstats.charts.SimplePie;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.plugin.RegisteredServiceProvider;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.incendo.cloud.annotations.AnnotationParser;
+import org.incendo.cloud.bukkit.CloudBukkitCapabilities;
+import org.incendo.cloud.execution.ExecutionCoordinator;
+import org.incendo.cloud.paper.PaperCommandManager;
+
+public class Vault extends JavaPlugin {
+
+    @Override
+    public void onDisable() {
+        // Remove all Service Registrations
+        getServer().getServicesManager().unregisterAll(this);
+        Bukkit.getScheduler().cancelTasks(this);
+    }
+
+    @Override
+    public void onEnable() {
+        // set defaults
+        getConfig().addDefault("update-check", true);
+        getConfig().options().copyDefaults(true);
+        saveConfig();
+
+        PaperCommandManager<CommandSender> commandManager = PaperCommandManager.createNative(
+                this,
+                ExecutionCoordinator.asyncCoordinator()
+        );
+        if (commandManager.hasCapability(CloudBukkitCapabilities.NATIVE_BRIGADIER)) {
+            commandManager.registerBrigadier();
+        }
+        if (commandManager.hasCapability(CloudBukkitCapabilities.ASYNCHRONOUS_COMPLETION)) {
+            commandManager.registerAsynchronousCompletions();
+        }
+
+        AnnotationParser<CommandSender> annotationParser = new AnnotationParser(commandManager, CommandSender.class);
+        annotationParser.parse(new ConvertCommand(this));
+        annotationParser.parse(new InfoCommand(this));
+
+        // Load up the Plugin metrics
+        Metrics metrics = new Metrics(this, 887);
+        findCustomData(metrics);
+    }
+
+    private void findCustomData(Metrics metrics) {
+        // Create our Economy Graph and Add our Economy plotters
+        RegisteredServiceProvider<Economy> rspEcon = Bukkit.getServer().getServicesManager().getRegistration(Economy.class);
+        Economy econ = null;
+        if (rspEcon != null) {
+            econ = rspEcon.getProvider();
+        }
+        final String econName = econ != null ? econ.getName() : "No Economy";
+        metrics.addCustomChart(new SimplePie("economy", () -> econName));
+
+        // Create our Permission Graph and Add our permission Plotters
+        RegisteredServiceProvider<Permission> rspPermission = Bukkit.getServer().getServicesManager().getRegistration(Permission.class);
+        Permission permission = null;
+        if (rspPermission != null) {
+            permission = rspPermission.getProvider();
+        }
+        final String permName = permission != null ? permission.getName() : "No Permission";
+        metrics.addCustomChart(new SimplePie("permission", () -> permName));
+
+        // Create our Chat Graph and Add our chat Plotters
+        RegisteredServiceProvider<Chat> rspChat = Bukkit.getServer().getServicesManager().getRegistration(Chat.class);
+        Chat chat = null;
+        if (rspChat != null) {
+            chat = rspChat.getProvider();
+        }
+        final String chatName = chat != null ? chat.getName() : "No Chat";
+        metrics.addCustomChart(new SimplePie("chat", () -> chatName));
+    }
+}
